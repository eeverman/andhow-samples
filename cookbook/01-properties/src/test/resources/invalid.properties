# ##########################################################################################
# Sample properties file generated by AndHow!
# strong.simple.valid.AppConfiguration  -  https://github.com/eeverman/andhow
# Note: When reading property names, matching is done in a case insensitive way, so 'Bob'
# 	would match 'bOB'.
# ##########################################################################################

# ##########################################################################################
# Property Group 'Record filter' - Filters are AND'ed together.
# Defined in org.example.ReportGenerator.Filter

# 
# MIN_SALE (BigDecimal)  - Min sale amount to include
# Default Value: 10
# The property value must be greater than or equal to 0
org.example.ReportGenerator.Filter.MIN_SALE = -1.00

# 
# REGION (String)
# The property value must be equal to one of '[EAST, WEST]' ignoring case
org.example.ReportGenerator.Filter.REGION = east

# 
# START_TIME (LocalDateTime)  - Include records after this date-time
# Default Value: 2010-01-01T00:00
org.example.ReportGenerator.Filter.START_TIME = 2020-01-01T00:00

# 
# ZIP (String)  - Zipcode w optional plus 4 (12345 or 12345-1234)
# The property value must match the regex expression '\d{5}(\-\d{4})?'
org.example.ReportGenerator.Filter.ZIP = 49501-1234

# ##########################################################################################
# Property Group org.example.ReportGenerator.Format

# 
# MARGIN (Double)  - Margin in inches
# Default Value: 1.0
# The property value must be greater than 0.25
org.example.ReportGenerator.Format.MARGIN = .625

# 
# WITH_HEADERS (Boolean)
# Default Value: true
org.example.ReportGenerator.Format.WITH_HEADERS = yes

# ##########################################################################################
# Property Group 'Connection Config' - Config's an http service connection.
# Defined in org.example.TransactionManager.Connection

# 
# BASE_URL (String) NON-NULL - Base url for a service request
# Recognized aliases: url
# The property value must:
# - start with 'http://'
# - end with '/'
org.example.TransactionManager.Connection.BASE_URL = http://service.net/

# 
# RETRY_CNT (Integer)  - # of request retries.  0 = no retry.
# Recognized aliases: retry, retry_cnt
# Default Value: 1
# The property value must:
# - be greater than or equal to 0
# - be less than 10
org.example.TransactionManager.Connection.RETRY_CNT = 2

# ##########################################################################################
# Property Group 'AndHow! Configuration Framework Configuration' - Configures how AndHow
# 	itself operates.
# Defined in org.yarnandtail.andhow.Options

# 
# CREATE_SAMPLES (Boolean) NON-NULL - Forces configuration samples to be sent to the
# 	console for each loader that supports it.
# Recognized aliases: AHForceCreateSamples
# Default Value: false
# On cmdline, this works as a flag and is assumed 'true' just by being present. In other
# 	config sources it can be set to 'true'.
# org.yarnandtail.andhow.Options.CREATE_SAMPLES = 

# 
# SAMPLES_DIRECTORY (String) NON-NULL - Path to a directory to be used to write sample
# 	configuration to. The special 'java.io.tmpdir' string is recognized as the current Java
# 	temp directory.
# Default Value: java.io.tmpdir/andhow-samples/
# All paths should be specified w/ forward slashes, even on windows systems.
# The property value must end with '/'
org.yarnandtail.andhow.Options.SAMPLES_DIRECTORY =

# ##########################################################################################
# Property Group 'JndiLoader Configuration' - Since JNDI providers use different base URIs
# 	to store entries, base URIs must be configurable. The most common URI roots are "java:",
# 	"java:comp/env/" or just "".To preserve whitespace or indicate an empty string, use
# 	double quotes around an individual comma separated value.If your container/provider uses
# 	something different, set one of these properties. All configured JNDI roots will be
# 	searched for each application property.Typically there are multiple roots to search and
# 	multiple forms of property names, leading to the possibility of duplicate/conflicting
# 	JNDI entries. If multiple entries are found in JNDI for a property, a runtime error is
# 	thrown at startup.
# Defined in org.yarnandtail.andhow.load.std.StdJndiLoader.CONFIG

# 
# STANDARD_JNDI_ROOTS (String) NON-NULL - A comma separated list of standard JNDI root
# 	locations to be searched for properties. Setting this property will replace the standard
# 	list, use ADDED_JNDI_ROOTS to only add to the list.
# Default Value: java:comp/env/,java:,""
# The final JNDI URIs to be searched will look like this '[root][Property Name]'
org.yarnandtail.andhow.load.std.StdJndiLoader.CONFIG.STANDARD_JNDI_ROOTS =

# 
# ADDED_JNDI_ROOTS (String)  - A comma separated list of JNDI root locations to be
# 	prepended to the standard list for searching. Setting this property does not affect the
# 	STANDARD_JNDI_ROOTS.
# The final JNDI URIs to be searched will look like this '[root][Property Name]'
org.yarnandtail.andhow.load.std.StdJndiLoader.CONFIG.ADDED_JNDI_ROOTS = 

